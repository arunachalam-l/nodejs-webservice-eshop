{"pilotid":0,"name":"NodeJSWebService","code":"PHR_NodeJSWebService","version":"1.0.0","description":" ","technology":{"id":"tech-nodejs-webservice","name":"Node JS Web Service","modules":[{"id":"mod_connect_1.7.2","name":"connect","core":true,"required":true,"docs":[{"content":"Connect is a middleware framework for node, shipping with over 18 bundled middleware and a rich selection of 3rd-party middleware.\n\n","type":"HELP_TEXT"},{"content":"Connect is a middleware framework for node, shipping with over 18 bundled middleware and a rich selection of 3rd-party middleware\n\nMiddleware:\n\n1)Logger request logger with custom format support\n2)Csrf Cross-site request forgery protection\n3)Compress Gzip compression middleware\n4)BasicAuth basic http authentication\n5)BodyParser extensible request body parser\n6)Json application/json parser\n7)Urlencoded application/x-www-form-urlencoded parser\n8)Multipart multipart/form-data parser\n9)CookieParser cookie parser\n10)Session session management support with bundled MemoryStore\n11)SessionSession cookie-based session support\n12)MethodOverride faux HTTP method support\n13)ResponseTime calculates response-time and exposes via X-Response-Time\n14)StaticCache memory cache layer for the static() middleware\n15)Static streaming static file server supporting Range and more\n16)Directory directory listing middleware\n17)Vhost virtual host sub-domain mapping middleware\n18)Favicon efficient favicon server (with default icon)\n19)Limit limit the bytesize of request bodies\n20)Query automatic querystring parser, populating req.query\n21)ErrorHandler flexible error handler\n\nInternals:\n\n1)Server prototype\n2)Connect utilities\n3)Node monkey patches\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.7.2","url":"/modules/tech-nodejs-webservice/files/mod_connect_1.7.2/1.7.2/mod_connect_1.7.2-1.7.2.zip","modulesid":0}]},{"id":"mod_express_0.5.0","name":"Express","core":true,"required":true,"docs":[{"content":"Express is used for high performance and for high class web development for Node.js.    ","type":"HELP_TEXT"},{"content":"Express is used for high performance and for high class web development for Node.js.  Creating A Server: To create an instance of the express.HTTPServer, simply invoke the createServer() method. With our instance app we can then define routes based on the HTTP verbs, in this example app.get().  Creating An HTTPS Server: To initialize a express.HTTPSServer we do the same as above, however we pass an options object, accepting key, cert and the others mentioned in node’s https documentation.  Configuration: Express supports arbitrary environments, such as production and development. Developers can use the configure() method to setup needs required by the current environment. When configure() is called without an environment name it will be run in every environment prior to the environment specific callback.In the example below we only dumpExceptions, and respond with exception stack traces in development mode, however for both environments we utilize methodOverride and bodyParser. Note the use of app.router, which can (optionally) be used to mount the application routes, otherwise the first call to app.get(), app.post(), etc will mount the routes.  Settings: Express supports the following settings out of the box:  1)Basepath Application base path used for res.redirect() and transparently handling mounted apps. 2)Views Root views directory defaulting to CWD/views 3)View engine Default view engine name for views rendered without extensions 4)View options An object specifying global view options 5)View cache Enable view caching (enabled in production) 6)Case sensitive routes Enable case-sensitive routing 7)Strict routing When enabled trailing slashes are no longer ignored 8)Jsonp callback Enable res.send() / res.json() transparent jsonp support  Routing: Express utilizes the HTTP verbs to provide a meaningful, expressive routing API. For example we may want to render a user’s account for the path /user/12, this can be done by defining the route below. The values associated to the named placeholders are available as req.params.  Passing Route Control: We may pass control to the next matching route, by calling the third argument, the next() function. When a match cannot be made, control is passed back to Connect, and middleware continue to be invoked in the order that they are added via use(). The same is true for several routes which have the same path defined, they will simply be executed in order until one does not call next() and decides to respond.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.5.0","url":"/modules/tech-nodejs-webservice/files/mod_express_0.5.0/0.5.0/mod_express_0.5.0-0.5.0.zip","modulesid":0}]},{"id":"mod_formidable_1.0.8","name":"formidable","core":true,"required":false,"docs":[{"content":"Formidable module is used for file uploads A node.js module for parsing form data.\n","type":"HELP_TEXT"},{"content":"Formidable module is used for file uploads and form data .A node.js module for parsing form data, especially file uploads\n\nFeatures:\n1)Fast (~500mb/sec), non-buffering multipart parser.\n2)Automatically writing file uploads to disk.\n3) Low memory footprint.\n4)Graceful error handling.\n5) Very high test coverage.\n\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.0.8","url":"/modules/tech-nodejs-webservice/files/mod_formidable_1.0.8/1.0.8/mod_formidable_1.0.8-1.0.8.zip","modulesid":0}]},{"id":"mod_hashish_0.0.4","name":"hashish","core":true,"required":false,"docs":[{"content":"Hashish is a node.js library for manipulating hash data structures. ","type":"HELP_TEXT"},{"content":"Hash data structure manipulation functions.Hashish is a node.js library for manipulating hash data structures. It is distilled from the finest that ruby, perl, and haskell have to offer by way of hash/map interfaces.Hashish provides a chaining interface.\n\nMethods:\n1)forEach( )\n2)map( )\n3)filter( )\n4)detect( )\n5)reduce( )\n6)some( )\n7)updateAll( )\n8)valuesAt( )\n9)tap( )\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.0.4","url":"/modules/tech-nodejs-webservice/files/mod_hashish_0.0.4/0.0.4/mod_hashish_0.0.4-0.0.4.zip","modulesid":0}]},{"id":"mod_hashring_0.0.5","name":"hashring","core":true,"required":false,"docs":[{"content":"Hashring provides consistent hashing based on the libketema library.\n\n\n\n","type":"HELP_TEXT"},{"content":"Hashring provides consistent hashing based on the libketema library. The constructor is designed to handle multiple arguments types as the hash ring can be used for different use cases. The ability to use a \"String\" to add a single server, a \"Array\" to provide multiple servers or an \"Object\" to provide servers with a custom weight. The weight can be used to give a server a bigger distribution in the hash ring. For example you have 3 machines, 2 of those machines have 8 gig memory and one has 32 gig of memory because the last server has more memory you might it to handle more keys than the other server. So you can give it a weight of 2 and the other servers a weight of 1.\n\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.0.5","url":"/modules/tech-nodejs-webservice/files/mod_hashring_0.0.5/0.0.5/mod_hashring_0.0.5-0.0.5.zip","modulesid":0}]},{"id":"mod_lingo_0.0.4","name":"lingo","core":true,"required":false,"docs":[{"content":" Lingo is a linguistics module, currently providing inflection and string transformations.Lingo has an ability to extends its capabilities and add additional languages.","type":"HELP_TEXT"},{"content":"Lingo is a linguistics module, currently providing inflection and string transformations. Lingo has an ability to extends its capabilities and add additional languages.Lingo is an open source indexing system for research and teachings.\n\nFunctions of Lingo:\n1)Identification of (i.e. reduction to) basic word form by means of dictionaries and suffix lists.\n2)Algorithmic decomposition.\n3)Dictionary-based synonymisation and identification of phrases.\n4)Generic identification of phrases/word sequences based on patterns of word classes.\n\nLines with an asterisk (*) and lines without. That\u0027s because Lingo distinguishes between commands and data. The +text_reader+ did not only read the content of the file, but also communicated through the commands when a file begins and when it ends. This can (and will) be an important piece of information for other attendees.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.0.4","url":"/modules/tech-nodejs-webservice/files/mod_lingo_0.0.4/0.0.4/mod_lingo_0.0.4-0.0.4.zip","modulesid":0}]},{"id":"mod_mime_1.2.4","name":"mime","core":true,"required":true,"docs":[{"content":"Mime is mainly used for mapping API.\n\n","type":"HELP_TEXT"},{"content":"Mime is mainly used for mapping API.\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.2.4","url":"/modules/tech-nodejs-webservice/files/mod_mime_1.2.4/1.2.4/mod_mime_1.2.4-1.2.4.zip","modulesid":0}]},{"id":"mod_moment_1.1.2","name":"moment","core":true,"required":false,"docs":[{"content":"Moment is used for date formating. A lightweight javascript date library for parsing, manipulating.","type":"HELP_TEXT"},{"content":"Moment is used for date formating. A lightweight javascript date library for parsing, manipulating.Moment was designed to work in all browser and in NodeJS. Instead of modifying the native Date.prototype, Moment.js creates a wrapper for the Date object. This is a pretty robust function for adding time to an existing date. \n\nFunctions:\n1)An integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC.\n2)A string that can be parsed by Date.parse. \n3)To get the current date and time, just call moment()with no parameters. \n4)An array mirroring the parameters passed into new Date().\n5)Any value past the year is optional, and will default to the lowest possible number.\n6)Construction with an array will create a date in the current timezone. \n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.1.2","url":"/modules/tech-nodejs-webservice/files/mod_moment_1.1.2/1.1.2/mod_moment_1.1.2-1.1.2.zip","modulesid":0}]},{"id":"mod_mysql_0.9.4","name":"mysql","core":true,"required":false,"docs":[{"content":"Mysql is mainly used for  database creation .A pure node.js JavaScript Client implementing the MySQL protocol.\n\n\n","type":"HELP_TEXT"},{"content":"Mysql is mainly used for  database creation .A pure node.js JavaScript Client implementing the MySQL protocol.\n\nTable manipulation:\n1)Create.\n2)Update/Edit.\n3)Delete.\n4)Truncate.\n5)Drop.\n\n\n\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.9.4","url":"/modules/tech-nodejs-webservice/files/mod_mysql_0.9.4/0.9.4/mod_mysql_0.9.4-0.9.4.zip","modulesid":0}]},{"id":"mod_nodeunit_0.6.4","name":"nodeunit","core":true,"required":true,"docs":[{"content":"Easy unit testing for node.js and the browser","type":"HELP_TEXT"},{"content":"Easy unit testing for node.js and the browser","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.6.4","url":"/modules/tech-nodejs-webservice/files/mod_nodeunit_0.6.4/0.6.4/mod_nodeunit_0.6.4-0.6.4.zip","modulesid":0}]},{"id":"mod_qs_0.3.1","name":"qs","core":true,"required":true,"docs":[{"content":"Query string parser for node supporting nesting.This module provides utilities for dealing with query strings. ","type":"HELP_TEXT"},{"content":"Query string parser for node supporting nesting.This module provides utilities for dealing with query strings.Query string parser for node supporting nesting.This module provides utilities for dealing with query strings.  \n\nMethods:\n1)querystring.stringify(obj, sep\u003d\u0027\u0026\u0027, eq\u003d\u0027\u003d\u0027).\n2)Serialize an object to a query string. Optionally override the default separator and assignment characters.\n3)querystring.parse(str, sep\u003d\u0027\u0026\u0027, eq\u003d\u0027\u003d\u0027).\n4)Deserialize a query string to an object. Optionally override the default separator and assignment characters. querystring.escape.\n5)The escape function used by querystring.stringify, provided so that it could be overridden if necessary. querystring.unescape.\n6)The unescape function used by querystring.parse, provided so that it could be overridden if necessary.\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.3.1","url":"/modules/tech-nodejs-webservice/files/mod_qs_0.3.1/0.3.1/mod_qs_0.3.1-0.3.1.zip","modulesid":0}]},{"id":"mod_sequelize_1.2.1","name":"Sequelize","core":true,"required":false,"docs":[{"content":"Sequelize library provides easy access to a MySQL database by mapping database entries to objects and vice versa.  It\u0027s an ORM (Object-Relational-Mapper). The library is written entirely in JavaScript and can be used in the Node.JS environment.","type":"HELP_TEXT"},{"content":"Sequelize library provides easy access to a MySQL database by mapping database entries to objects and vice versa.  it\u0027s an ORM (Object-Relational-Mapper). The library is written entirely in JavaScript and can be used in the Node.JS environment.\n\nFeatures:\n1)Schema definition.\n2)Schema synchronization/dropping.\n3)Easy definition of class/instance methods.\n4)Instance saving/updating/dropping.\n5)Asynchronous library.\n6)Associations.\n7)Importing definitions from single files.\n\n\n\n","type":"DESCRIPTION"}],"versions":[{"dependentModules":[{"id":"mod_underscore_1.2.2","name":"underscore","core":true,"required":false,"docs":[{"content":"Underscore is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter)  without extending any core JavaScript objects. This module is used for utility purpose","type":"HELP_TEXT"},{"content":"Underscore is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter)  without extending any core JavaScript objects. This module is used for utility purpose. Underscore provides 60-odd functions that support both the usual functional suspects [map, select, invoke — as well as more specialized helpers: function binding, javascript templating, deep equality testing,] It delegates to built-in functions and it  present some of the  modern browsers will use the native implementations for each, map, reduce, filter, every, some and indexOf.\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.2.2","url":"/modules/tech-nodejs-webservice/files/mod_underscore_1.2.2/1.2.2/mod_underscore_1.2.2-1.2.2.zip","modulesid":0}]},{"id":"mod_underscore.string_1.2.0","name":"underscore.string","core":true,"required":false,"docs":[{"content":"Underscore.string  module is for string manipulation.","type":"HELP_TEXT"},{"content":"String manipulation extensions for Underscore.js javascript library.Underscore.string is JavaScript library for comfortable manipulation with strings, extension for Underscore.js inspired by Prototype.js, Right.js, Underscore and beautiful Ruby language.\n\nUnderscore.string provides you several useful functions: \n1)capitalize.\n2)clean.\n3)includes.\n4)count.\n5)escapeHTML.\n6)unescapeHTML.\n7)insert. \n8)splice.\n9)startsWith.\n10)endsWith.\n11) titleize.\n12)trim.\n13)truncate and so on.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.2.0","url":"/modules/tech-nodejs-webservice/files/mod_underscore.string_1.2.0/1.2.0/mod_underscore.string_1.2.0-1.2.0.zip","modulesid":0}]},{"id":"mod_lingo_0.0.4","name":"lingo","core":true,"required":false,"docs":[{"content":" Lingo is a linguistics module, currently providing inflection and string transformations.Lingo has an ability to extends its capabilities and add additional languages.","type":"HELP_TEXT"},{"content":"Lingo is a linguistics module, currently providing inflection and string transformations. Lingo has an ability to extends its capabilities and add additional languages.Lingo is an open source indexing system for research and teachings.\n\nFunctions of Lingo:\n1)Identification of (i.e. reduction to) basic word form by means of dictionaries and suffix lists.\n2)Algorithmic decomposition.\n3)Dictionary-based synonymisation and identification of phrases.\n4)Generic identification of phrases/word sequences based on patterns of word classes.\n\nLines with an asterisk (*) and lines without. That\u0027s because Lingo distinguishes between commands and data. The +text_reader+ did not only read the content of the file, but also communicated through the commands when a file begins and when it ends. This can (and will) be an important piece of information for other attendees.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.0.4","url":"/modules/tech-nodejs-webservice/files/mod_lingo_0.0.4/0.0.4/mod_lingo_0.0.4-0.0.4.zip","modulesid":0}]},{"id":"mod_moment_1.1.2","name":"moment","core":true,"required":false,"docs":[{"content":"Moment is used for date formating. A lightweight javascript date library for parsing, manipulating.","type":"HELP_TEXT"},{"content":"Moment is used for date formating. A lightweight javascript date library for parsing, manipulating.Moment was designed to work in all browser and in NodeJS. Instead of modifying the native Date.prototype, Moment.js creates a wrapper for the Date object. This is a pretty robust function for adding time to an existing date. \n\nFunctions:\n1)An integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC.\n2)A string that can be parsed by Date.parse. \n3)To get the current date and time, just call moment()with no parameters. \n4)An array mirroring the parameters passed into new Date().\n5)Any value past the year is optional, and will default to the lowest possible number.\n6)Construction with an array will create a date in the current timezone. \n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.1.2","url":"/modules/tech-nodejs-webservice/files/mod_moment_1.1.2/1.1.2/mod_moment_1.1.2-1.1.2.zip","modulesid":0}]},{"id":"mod_validator_0.3.5","name":"validator","core":true,"required":false,"docs":[{"content":"Validator is used for String validation and sanitization in JavaScript.\n","type":"HELP_TEXT"},{"content":"Validator is  used for String validation and sanitization in JavaScript.Often it\u0027s more desirable to check or automatically sanitize parameters by name (rather than the actual string). See this gist for instructions on binding the library to the request prototype. If you are using the express.js framework you can use the express-validator middleware to seamlessly integrate node-validator.\n\nFunctions:\n1)When adding to the Validator prototype, use this.str to access the string and this.error(this.msg || default_msg) when the string is invalid.\n2)When adding to the Filter (sanitize) prototype, use this.str to access the string and this.modify(new_str) to update it.\n3)By default, the validation methods throw an exception when a check fails.\n4)To set a custom error message, set the second param of.\n5)To attach a custom error handler, set the error method of the validator instance.\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.3.5","url":"/modules/tech-nodejs-webservice/files/mod_validator_0.3.5/0.3.5/mod_validator_0.3.5-0.3.5.zip","modulesid":0}]}],"documentsid":0,"version":"1.2.1","url":"/modules/tech-nodejs-webservice/files/mod_sequelize_1.2.1/1.2.1/mod_sequelize_1.2.1-1.2.1.zip","modulesid":0}]},{"id":"mod_traverse_0.5.1","name":"traverse","core":true,"required":false,"docs":[{"content":"Traverse and transform objects by visiting every node on a recursive walk.\n","type":"HELP_TEXT"},{"content":"Traverse and transform objects by visiting every node on a recursive walk.\n\nMethods:\n1).map(fn)\n2).forEach(fn)\n3).reduce(fn, acc)\n4).paths()\n5).nodes()\n6).clone()\n7).get(path)\n8).set(path, value)\n9).has(path)\n\n\n\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.5.1","url":"/modules/tech-nodejs-webservice/files/mod_traverse_0.5.1/0.5.1/mod_traverse_0.5.1-0.5.1.zip","modulesid":0}]},{"id":"mod_underscore_1.2.2","name":"underscore","core":true,"required":false,"docs":[{"content":"Underscore is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter)  without extending any core JavaScript objects. This module is used for utility purpose","type":"HELP_TEXT"},{"content":"Underscore is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter)  without extending any core JavaScript objects. This module is used for utility purpose. Underscore provides 60-odd functions that support both the usual functional suspects [map, select, invoke — as well as more specialized helpers: function binding, javascript templating, deep equality testing,] It delegates to built-in functions and it  present some of the  modern browsers will use the native implementations for each, map, reduce, filter, every, some and indexOf.\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.2.2","url":"/modules/tech-nodejs-webservice/files/mod_underscore_1.2.2/1.2.2/mod_underscore_1.2.2-1.2.2.zip","modulesid":0}]},{"id":"mod_underscore.string_1.2.0","name":"underscore.string","core":true,"required":false,"docs":[{"content":"Underscore.string  module is for string manipulation.","type":"HELP_TEXT"},{"content":"String manipulation extensions for Underscore.js javascript library.Underscore.string is JavaScript library for comfortable manipulation with strings, extension for Underscore.js inspired by Prototype.js, Right.js, Underscore and beautiful Ruby language.\n\nUnderscore.string provides you several useful functions: \n1)capitalize.\n2)clean.\n3)includes.\n4)count.\n5)escapeHTML.\n6)unescapeHTML.\n7)insert. \n8)splice.\n9)startsWith.\n10)endsWith.\n11) titleize.\n12)trim.\n13)truncate and so on.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"1.2.0","url":"/modules/tech-nodejs-webservice/files/mod_underscore.string_1.2.0/1.2.0/mod_underscore.string_1.2.0-1.2.0.zip","modulesid":0}]},{"id":"mod_validator_0.3.5","name":"validator","core":true,"required":false,"docs":[{"content":"Validator is used for String validation and sanitization in JavaScript.\n","type":"HELP_TEXT"},{"content":"Validator is  used for String validation and sanitization in JavaScript.Often it\u0027s more desirable to check or automatically sanitize parameters by name (rather than the actual string). See this gist for instructions on binding the library to the request prototype. If you are using the express.js framework you can use the express-validator middleware to seamlessly integrate node-validator.\n\nFunctions:\n1)When adding to the Validator prototype, use this.str to access the string and this.error(this.msg || default_msg) when the string is invalid.\n2)When adding to the Filter (sanitize) prototype, use this.str to access the string and this.modify(new_str) to update it.\n3)By default, the validation methods throw an exception when a check fails.\n4)To set a custom error message, set the second param of.\n5)To attach a custom error handler, set the error method of the validator instance.\n\n","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.3.5","url":"/modules/tech-nodejs-webservice/files/mod_validator_0.3.5/0.3.5/mod_validator_0.3.5-0.3.5.zip","modulesid":0}]},{"id":"mod_xml2js_0.1.14","name":"xml2js","core":true,"required":true,"docs":[{"content":"Simple XML to JavaScript object converter.","type":"HELP_TEXT"},{"content":"Simple XML to JavaScript object converter.","type":"DESCRIPTION"}],"versions":[{"documentsid":0,"version":"0.1.14","url":"/modules/tech-nodejs-webservice/files/mod_xml2js_0.1.14/0.1.14/mod_xml2js_0.1.14-0.1.14.zip","modulesid":0}]}],"servers":[{"id":6,"name":"NodeJS","versions":["0.6.x"],"description":"NodeJS"}],"databases":[{"id":1,"name":"MySQL","versions":["5.5.1"],"description":"My SQL DB"}],"emailSupported":false,"versions":["6.14"]},"application":"apptype-web-services","pilotProjectName":"EShop WebService","projectCode":"NJSWS"}